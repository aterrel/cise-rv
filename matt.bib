Automatically generated by Mendeley 1.3
Any changes to this file will be lost if it is regenerated by Mendeley.

@article{Erwig2006,
abstract = {At the heart of functional programming rests the principle of referential transparency, which in particular means that a function f applied to a value x always yields one and the same value y=f(x). This principle seems to be violated when contemplating the use of functions to describe probabilistic events, such as rolling a die: It is not clear at all what exactly the outcome will be, and neither is it guaranteed that the same value will be produced repeatedly. However, these two seemingly incompatible notions can be reconciled if probabilistic values are encapsulated in a data type. In this paper, we will demonstrate such an approach by describing a probabilistic functional programming (PFP) library for Haskell. We will show that the proposed approach not only facilitates probabilistic programming in functional languages, but in particular can lead to very concise programs and simulations. In particular, a major advantage of our system is that simulations can be specified independently from their method of execution. That is, we can either fully simulate or randomize any simulation without altering the code which defines it.},
author = {Erwig, Martin and Kollmansberger, Steve},
file = {:home/mrocklin/Downloads/PFP\_JFP06.pdf:pdf},
journal = {Journal of Functional Programming},
number = {1},
pages = {21--34},
title = {{Probabilistic Functional Programming in Haskell}},
url = {http://web.engr.oregonstate.edu/~erwig/papers/abstracts.html\#JFP06a},
volume = {16},
year = {2006}
}
